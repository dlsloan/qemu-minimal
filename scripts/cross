#!/bin/bash
# (c) Stephen Bates, Raithlin Consulting 2017
#
# A simple script to generate a (cross) rootfs using multi-strap. Note
# that you will need the following packages:
# multistrap, qemu, qemu-user-static, binfmt-support and dpkg-cross
#
# This script is based on instructions at [1]-[3]. But are updated for the
# latest version of Debian.
#
# [1] https://www.acmesystems.it/debian_jessie
# [2] http://free-electrons.com/blog/embdebian-with-multistrap/
#
# NB This script must be run as root!
#
# Once the rootfs is created you can run it inside QEMU using
# something like:
#
# /opt/qemu/qemu-upstream/bin/qemu-system-aarch64 -machine virt \ 
#   -cpu cortex-a57 -machine type=virt -nographic -smp 1 -m 2048 \
#   -kernel ~/Image-aarch64-def-p2pmem  --append "nvme.use_cmb=24 \
#   root=/dev/vda console=ttyAMA0 rootwait rw" \
#   -drive file=image.img,if=none,format=raw,id=hd0 \
#   -device virtio-blk-device,drive=hd0 \
#   -drive file=../images/nvme2.qcow2,if=none,id=nvme2,snapshot=on \
#   -device nvme,drive=nvme2,serial=nvme2,cmb_size_mb=64
#
# cc1 issue (if gcc is installed):
#   ln -s /usr/lib/gcc/aarch64-linux-gnu/6/cc1 /usr/bin/cc1

set +e

if [ "$EUID" -ne 0 ]; then
  echo "This script must be run as root"
  exit 1
fi

  # Input arguments

ROOTFS=${ROOTFS:-rootfs}
ARCH=${ARCH:-arm64}
MULTISTRAP=${MULTISTRAP:-multistrap.conf}
IMAGE=${IMAGE:-image-${ARCH}.img}
MOUNT=${MOUNT:-/mnt/cross}
	
  # Create directory for rootfs and start to put useful things in
  # it. These include the qemu-$ARCH user-space tool, 

if [ ! -e $MULTISTRAP ]; then
    echo "${MULTISTRAP} does not exist, create it!"
    exit -1
fi

mkdir $ROOTFS
multistrap -a $ARCH -d $ROOTFS -f multistrap.conf
if [[ "${ARCH}" = "arm64" ]]; then
    cp /usr/bin/qemu-aarch64-static ${ROOTFS}/usr/bin
elif [[ "${ARCH}" = "ppc64el" ]]; then
    cp /usr/bin/qemu-ppc64le-static ${ROOTFS}/usr/bin
    export QEMU_CPU=POWER8 # Fixes https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=813698
else
    cp /usr/bin/qemu-$ARCH-static ${ROOTFS}/usr/bin
fi

export DEBIAN_FRONTEND=noninteractive
export DEBCONF_NONINTERACTIVE_SEEN=true
export LC_ALL=C
export LANGUAGE=C
export LANG=C

chroot $ROOTFS /var/lib/dpkg/info/dash.preinst install
chroot $ROOTFS dpkg --configure -a
chroot $ROOTFS chpasswd <<< root:awhisten

mount proc -t proc $ROOTFS/proc

function cleanup {
    set +e
    umount $ROOTFS/proc 2> /dev/null#
}
trap cleanup EXIT

chroot $ROOTFS dpkg --configure -a

cat > $ROOTFS/etc/fstab << EOF
proc               /proc             proc    defaults          0       0
sysfs              /sys              sysfs   defaults          0       0
debugfs            /sys/kernel/debug debugfs defaults          0       0
tmpfs              /tmp              tmpfs   defaults          0       0
EOF

ln -fs /proc/mounts $ROOTFS/etc/mtab
umount $ROOTFS/proc

dd if=/dev/zero of=$IMAGE bs=1M count=1024
mkfs.ext4 $IMAGE
mkdir -p $MOUNT
mount -t ext4 $IMAGE $MOUNT -o loop
cp -r ${ROOTFS}/* ${MOUNT}
umount ${MOUNT}
